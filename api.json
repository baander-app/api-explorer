{
    "openapi": "3.1.0",
    "info": {
        "title": "B\u00e5nder api docs",
        "version": "0.0.1",
        "description": "B\u00e5nder.App is a sophisticated media server developed with the primary goal to deliver high performance and seamless experience for users.\nBeing built on top of Laravel framework and PostgreSQL for database, it leverages the power of robust backend technologies, providing high security, reliability, and scalability.\n\nThe main focus of B\u00e5nder.App is efficient media management and delivery.\nThis application is designed to handle large amounts of media files while ensuring quick and efficient access.\nImplemented queuing functionality through Redis offers efficient job management and load handling.\nThe media information is organized and easily searchable, ensuring users can always find what they are looking for quickly and easily."
    },
    "servers": [
        {
            "url": "https://baander.test"
        }
    ],
    "security": [
        {
            "http": []
        }
    ],
    "paths": {
        "/api/libraries/{library}/albums": {
            "get": {
                "operationId": "albums.index",
                "description": "Returns a filtered and paginated list of albums from the specified library.\nSupports field selection, relation inclusion, and genre filtering for optimized queries.",
                "summary": "Get a paginated collection of albums from a specific library",
                "tags": [
                    "Album"
                ],
                "parameters": [
                    {
                        "name": "library",
                        "in": "path",
                        "required": true,
                        "description": "The library to retrieve albums from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "relations",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "genres",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of `AlbumResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/AlbumResource"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/libraries/{library}/albums/{album}": {
            "get": {
                "operationId": "albums.show",
                "description": "Retrieves a single album from the specified library with all related data\nincluding artists, cover art, and songs for comprehensive display.",
                "summary": "Get a specific album with detailed information",
                "tags": [
                    "Album"
                ],
                "parameters": [
                    {
                        "name": "library",
                        "in": "path",
                        "required": true,
                        "description": "The library containing the album",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "album",
                        "in": "path",
                        "required": true,
                        "description": "The album to retrieve",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`AlbumResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlbumResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            },
            "put": {
                "operationId": "albums.update",
                "description": "Updates album metadata and information using the provided data.\nOnly the fields included in the request will be modified.",
                "summary": "Update an existing album",
                "tags": [
                    "Album"
                ],
                "parameters": [
                    {
                        "name": "library",
                        "in": "path",
                        "required": true,
                        "description": "The library containing the album",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "album",
                        "in": "path",
                        "required": true,
                        "description": "The album to update",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AlbumUpdateRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`AlbumResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AlbumResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/libraries/{library}/artists": {
            "get": {
                "operationId": "artists.index",
                "description": "Returns a filtered and paginated list of artists from the specified library.\nSupports field selection and relation inclusion for optimized queries.",
                "summary": "Get a paginated collection of artists from a specific library",
                "tags": [
                    "Artist"
                ],
                "parameters": [
                    {
                        "name": "library",
                        "in": "path",
                        "required": true,
                        "description": "The library to retrieve artists from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "relations",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "genres",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of `ArtistResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/ArtistResource"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/libraries/{library}/artists/{artist}": {
            "get": {
                "operationId": "artists.show",
                "description": "Retrieves a single artist from the specified library with comprehensive\ninformation including albums, songs, and other related data.",
                "summary": "Get a specific artist with detailed information",
                "tags": [
                    "Artist"
                ],
                "parameters": [
                    {
                        "name": "library",
                        "in": "path",
                        "required": true,
                        "description": "The library containing the artist",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "artist",
                        "in": "path",
                        "required": true,
                        "description": "The artist to retrieve",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`ArtistResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ArtistResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "operationId": "auth.login",
                "description": "Authenticates a user with email and password, creates access and refresh tokens\nwith device binding and location tracking for security purposes.",
                "summary": "Authenticate user and create session",
                "tags": [
                    "Auth"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LoginRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "accessToken": {
                                            "$ref": "#/components/schemas/NewAccessTokenResource"
                                        },
                                        "refreshToken": {
                                            "$ref": "#/components/schemas/NewAccessTokenResource"
                                        },
                                        "sessionId": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "accessToken",
                                        "refreshToken",
                                        "sessionId"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "description": "An error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Error overview.",
                                            "example": "Invalid credentials."
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                },
                "security": []
            }
        },
        "/api/auth/refreshToken": {
            "post": {
                "operationId": "auth.refreshToken",
                "description": "Creates a new access token using a valid refresh token. Updates device\nbinding information and maintains session continuity.",
                "summary": "Refresh access token using refresh token",
                "tags": [
                    "Auth"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "accessToken": {
                                            "$ref": "#/components/schemas/NewAccessTokenResource"
                                        }
                                    },
                                    "required": [
                                        "accessToken"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/auth/streamToken": {
            "post": {
                "operationId": "auth.streamToken",
                "description": "Generates a short-lived token specifically for media streaming operations.\nThese tokens have limited scope and shorter expiration for enhanced security.",
                "summary": "Create a stream-specific access token",
                "tags": [
                    "Auth"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "streamToken": {
                                            "$ref": "#/components/schemas/NewAccessTokenResource"
                                        }
                                    },
                                    "required": [
                                        "streamToken"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "operationId": "auth.register",
                "description": "Creates a new user account with the provided information and automatically\nlogs them in with access and refresh tokens.",
                "summary": "Register a new user account",
                "tags": [
                    "Auth"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RegisterRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "accessToken": {
                                            "$ref": "#/components/schemas/NewAccessTokenResource"
                                        },
                                        "refreshToken": {
                                            "$ref": "#/components/schemas/NewAccessTokenResource"
                                        },
                                        "sessionId": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "accessToken",
                                        "refreshToken",
                                        "sessionId"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                },
                "security": []
            }
        },
        "/api/auth/tokens": {
            "get": {
                "operationId": "auth.tokens",
                "description": "Returns detailed information about all active tokens/sessions including\nIP history, location data, and device information for security management.",
                "summary": "Get user's active sessions and tokens",
                "tags": [
                    "Auth"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "id": {
                                                "type": "integer"
                                            },
                                            "name": {
                                                "type": "string"
                                            },
                                            "ip_address": {
                                                "type": "string"
                                            },
                                            "ip_change_count": {
                                                "type": "integer"
                                            },
                                            "country_code": {
                                                "type": "string"
                                            },
                                            "city": {
                                                "type": "string"
                                            },
                                            "ip_history": {
                                                "type": "array",
                                                "items": {}
                                            },
                                            "last_used_at": {
                                                "type": "string"
                                            },
                                            "created_at": {
                                                "type": "string"
                                            },
                                            "is_current": {
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "id",
                                            "name",
                                            "ip_address",
                                            "ip_change_count",
                                            "country_code",
                                            "city",
                                            "ip_history",
                                            "last_used_at",
                                            "created_at",
                                            "is_current"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            },
            "delete": {
                "operationId": "auth.tokens.revokeAll",
                "description": "Revokes all active tokens except the current session. Useful for security\npurposes when user wants to log out all other devices.",
                "summary": "Revoke all sessions except current",
                "tags": [
                    "Auth"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/auth/tokens/{tokenId}": {
            "delete": {
                "operationId": "auth.tokens.revoke",
                "description": "Permanently revokes a specific token, ending that session. Cannot be used\nto revoke the current session - use logout endpoint instead.",
                "summary": "Revoke a specific token/session",
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "name": "tokenId",
                        "in": "path",
                        "required": true,
                        "description": "The ID of the token to revoke",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/auth/forgotPassword": {
            "post": {
                "operationId": "auth.forgotPassword",
                "description": "Sends a password reset link to the specified email address if a user\naccount exists. The link contains a secure token for verification.",
                "summary": "Request a password-reset link",
                "tags": [
                    "Auth"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ForgotPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                },
                "security": []
            }
        },
        "/api/auth/resetPassword": {
            "post": {
                "operationId": "auth.resetPassword",
                "description": "Resets the user's password using a valid reset token. All existing\ntokens are revoked for security after a password change.",
                "summary": "Reset user password",
                "tags": [
                    "Auth"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ResetPasswordRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "An error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Error overview.",
                                            "example": "Provided invalid token."
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                },
                "security": []
            }
        },
        "/api/auth/verify/{id}/{hash}": {
            "post": {
                "operationId": "auth.verifyEmail",
                "description": "Verifies a user's email address using the verification link sent during\nregistration or email change. Marks the email as verified.",
                "summary": "Verify the user email address",
                "tags": [
                    "Auth"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "User ID from verification URL",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hash",
                        "in": "path",
                        "required": true,
                        "description": "Verification hash from URL",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    }
                },
                "security": []
            }
        },
        "/api/auth/logout": {
            "post": {
                "operationId": "auth.logout",
                "description": "Revokes the current access and refresh tokens, effectively logging out\nthe user from the current session/device.",
                "summary": "Log out the current session",
                "tags": [
                    "Auth"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/LogoutRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Logout successful - no content returned.\n\n\n\nNo content"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/webauthn/passkey": {
            "get": {
                "operationId": "auth.passkey.options",
                "description": "Creates a cryptographic challenge for passkey authentication including\nallowed credentials and relying party information. This challenge must\nbe used with the WebAuthn JavaScript API for authentication.",
                "summary": "Generate WebAuthn authentication challenge",
                "tags": [
                    "Auth",
                    "Passkey"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "challenge": {
                                            "type": "string"
                                        },
                                        "rpId": {
                                            "type": "string"
                                        },
                                        "allowCredentials": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "type": "string"
                                                    },
                                                    "type": {
                                                        "type": "string"
                                                    },
                                                    "transports": {
                                                        "type": "array",
                                                        "items": {
                                                            "type": "string"
                                                        }
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "type",
                                                    "transports"
                                                ]
                                            }
                                        },
                                        "userVerification": {
                                            "type": "string"
                                        },
                                        "timeout": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "challenge",
                                        "rpId",
                                        "allowCredentials",
                                        "userVerification",
                                        "timeout"
                                    ]
                                }
                            }
                        }
                    }
                },
                "security": []
            },
            "post": {
                "operationId": "auth.passkey.login",
                "description": "Verifies the WebAuthn assertion from the user's authenticator and logs them in\nif successful. Creates session tokens and handles redirect logic for seamless\nauthentication experience.",
                "summary": "Authenticate using WebAuthn passkey",
                "tags": [
                    "Auth",
                    "Passkey"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/AuthenticateUsingPasskeyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "accessToken": {
                                                    "type": "object"
                                                },
                                                "refreshToken": {
                                                    "type": "object"
                                                },
                                                "sessionId": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "accessToken",
                                                "refreshToken",
                                                "sessionId"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "message": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "message"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                },
                "security": []
            }
        },
        "/webauthn/passkey/register": {
            "get": {
                "operationId": "auth.passkey.register-option",
                "description": "Creates a cryptographic challenge for registering a new passkey to the\nauthenticated user's account. The challenge includes user information\nand credential creation parameters.",
                "summary": "Generate WebAuthn registration challenge for new passkey",
                "tags": [
                    "Auth",
                    "Passkey"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "rp": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string"
                                                },
                                                "id": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "name",
                                                "id"
                                            ]
                                        },
                                        "user": {
                                            "type": "object",
                                            "properties": {
                                                "id": {
                                                    "type": "string"
                                                },
                                                "name": {
                                                    "type": "string"
                                                },
                                                "displayName": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "id",
                                                "name",
                                                "displayName"
                                            ]
                                        },
                                        "challenge": {
                                            "type": "string"
                                        },
                                        "pubKeyCredParams": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string"
                                                    },
                                                    "alg": {
                                                        "type": "integer"
                                                    }
                                                },
                                                "required": [
                                                    "type",
                                                    "alg"
                                                ]
                                            }
                                        },
                                        "timeout": {
                                            "type": "integer"
                                        },
                                        "attestation": {
                                            "type": "string"
                                        },
                                        "authenticatorSelection": {
                                            "type": "object",
                                            "properties": {
                                                "authenticatorAttachment": {
                                                    "type": "string"
                                                },
                                                "userVerification": {
                                                    "type": "string"
                                                },
                                                "residentKey": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "authenticatorAttachment",
                                                "userVerification",
                                                "residentKey"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "rp",
                                        "user",
                                        "challenge",
                                        "pubKeyCredParams",
                                        "timeout",
                                        "attestation",
                                        "authenticatorSelection"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "post": {
                "operationId": "auth.passkey.register",
                "description": "Processes the WebAuthn attestation response to register a new passkey\ncredential for the user's account. Includes validation and secure storage\nof the credential with optional naming.",
                "summary": "Register a new passkey for the authenticated user",
                "tags": [
                    "Auth",
                    "Passkey"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StorePasskeyRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "message": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "message"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/-/horizon/api/batches": {
            "get": {
                "operationId": "horizon.jobs-batches.index",
                "summary": "Get all of the batches",
                "tags": [
                    "Batches"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "batches": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            },
                                            "minItems": 0,
                                            "maxItems": 0,
                                            "additionalItems": false
                                        }
                                    },
                                    "required": [
                                        "batches"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/batches/{id}": {
            "get": {
                "operationId": "horizon.jobs-batches.show",
                "summary": "Get the details of a batch by ID",
                "tags": [
                    "Batches"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "batch": {
                                            "type": "string"
                                        },
                                        "failedJobs": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "batch",
                                        "failedJobs"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/batches/retry/{id}": {
            "post": {
                "operationId": "horizon.jobs-batches.retry",
                "summary": "Retry the given batch",
                "tags": [
                    "Batches"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/jobs/completed": {
            "get": {
                "operationId": "horizon.completed-jobs.index",
                "summary": "Get all of the completed jobs",
                "tags": [
                    "CompletedJobs"
                ],
                "parameters": [
                    {
                        "name": "starting_at",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jobs": {
                                            "type": "string"
                                        },
                                        "total": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "jobs",
                                        "total"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/stats": {
            "get": {
                "operationId": "horizon.stats.index",
                "summary": "Get the key performance stats for the dashboard",
                "tags": [
                    "DashboardStats"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "failedJobs": {
                                            "type": "string"
                                        },
                                        "jobsPerMinute": {
                                            "type": "string"
                                        },
                                        "pausedMasters": {
                                            "anyOf": [
                                                {
                                                    "type": "string"
                                                },
                                                {
                                                    "type": "integer",
                                                    "enum": [
                                                        0
                                                    ]
                                                }
                                            ]
                                        },
                                        "periods": {
                                            "type": "object",
                                            "properties": {
                                                "failedJobs": {
                                                    "type": "string"
                                                },
                                                "recentJobs": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "failedJobs",
                                                "recentJobs"
                                            ]
                                        },
                                        "processes": {
                                            "type": "string"
                                        },
                                        "queueWithMaxRuntime": {
                                            "type": "string"
                                        },
                                        "queueWithMaxThroughput": {
                                            "type": "string"
                                        },
                                        "recentJobs": {
                                            "type": "string"
                                        },
                                        "status": {
                                            "type": "string",
                                            "enum": [
                                                "paused",
                                                "running",
                                                "inactive"
                                            ]
                                        },
                                        "wait": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "failedJobs",
                                        "jobsPerMinute",
                                        "pausedMasters",
                                        "periods",
                                        "processes",
                                        "queueWithMaxRuntime",
                                        "queueWithMaxThroughput",
                                        "recentJobs",
                                        "status",
                                        "wait"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/jobs/failed": {
            "get": {
                "operationId": "horizon.failed-jobs.index",
                "summary": "Get all of the failed jobs",
                "tags": [
                    "FailedJobs"
                ],
                "parameters": [
                    {
                        "name": "tag",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jobs": {
                                            "type": "string"
                                        },
                                        "total": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "jobs",
                                        "total"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/jobs/failed/{id}": {
            "get": {
                "operationId": "horizon.failed-jobs.show",
                "summary": "Get a failed job instance",
                "tags": [
                    "FailedJobs"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/api/genres": {
            "get": {
                "operationId": "genres.index",
                "description": "Returns a filtered and paginated list of all music genres in the system.\nSupports field selection and library filtering for optimized queries.",
                "summary": "Get a paginated collection of music genres",
                "tags": [
                    "Genre"
                ],
                "parameters": [
                    {
                        "name": "fields",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "relations",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "librarySlug",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of `GenreResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/GenreResource"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/genres/{genre}": {
            "get": {
                "operationId": "genres.show",
                "description": "Retrieves a single genre with comprehensive information including\nassociated artists, albums, and usage statistics.",
                "summary": "Get a specific genre with detailed information",
                "tags": [
                    "Genre"
                ],
                "parameters": [
                    {
                        "name": "genre",
                        "in": "path",
                        "required": true,
                        "description": "The genre to retrieve",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`GenreResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenreResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            },
            "patch": {
                "operationId": "genres.update",
                "description": "Updates genre information including name, description, and metadata.\nOnly the fields included in the request will be modified.",
                "summary": "Update an existing genre",
                "tags": [
                    "Genre"
                ],
                "parameters": [
                    {
                        "name": "genre",
                        "in": "path",
                        "required": true,
                        "description": "The genre to update",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateGenreRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`GenreResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GenreResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            },
            "delete": {
                "operationId": "genres.destroy",
                "description": "Permanently removes a genre from the system. This action will also\nremove the genre association from all related albums and songs.",
                "summary": "Delete a genre",
                "tags": [
                    "Genre"
                ],
                "parameters": [
                    {
                        "name": "genre",
                        "in": "path",
                        "required": true,
                        "description": "The genre to delete",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/images/{image}": {
            "get": {
                "operationId": "image.serve",
                "summary": "Get an image asset",
                "tags": [
                    "Image"
                ],
                "parameters": [
                    {
                        "name": "image",
                        "in": "path",
                        "required": true,
                        "description": "The image public id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    }
                },
                "security": []
            }
        },
        "/api/jobs/locks": {
            "get": {
                "operationId": "job.locks",
                "description": "Returns information about active job locks including TTL, age, and status.\nUsed for monitoring job execution and identifying stuck or long-running jobs.",
                "summary": "Get all job locks for a specific job type",
                "tags": [
                    "Job"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "key": {
                                                "type": "string"
                                            },
                                            "ttl": {
                                                "type": "integer"
                                            },
                                            "age_hours": {
                                                "anyOf": [
                                                    {
                                                        "type": "integer"
                                                    },
                                                    {
                                                        "type": "string"
                                                    }
                                                ]
                                            },
                                            "exists": {
                                                "type": "boolean"
                                            }
                                        },
                                        "required": [
                                            "key",
                                            "ttl",
                                            "age_hours",
                                            "exists"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/jobs/locks/{jobClass}/lock/{jobId}": {
            "get": {
                "operationId": "job.lock",
                "description": "Retrieves detailed information about a specific job lock including\nits current state, time-to-live, and age for debugging purposes.",
                "summary": "Get specific job lock information",
                "tags": [
                    "Job"
                ],
                "parameters": [
                    {
                        "name": "jobClass",
                        "in": "path",
                        "required": true,
                        "description": "The job class name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "required": true,
                        "description": "The specific job instance ID",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "key": {
                                            "type": "string"
                                        },
                                        "ttl": {
                                            "type": "integer"
                                        },
                                        "age_hours": {
                                            "anyOf": [
                                                {
                                                    "type": "integer"
                                                },
                                                {
                                                    "type": "string"
                                                }
                                            ]
                                        },
                                        "exists": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "key",
                                        "ttl",
                                        "age_hours",
                                        "exists"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            },
            "delete": {
                "operationId": "job.lock-delete",
                "description": "Manually removes a job lock, typically used to clear stuck jobs that\nare preventing new instances from running. Use with caution as this\ncan interfere with actively running jobs.",
                "summary": "Force remove a specific job lock",
                "tags": [
                    "Job"
                ],
                "parameters": [
                    {
                        "name": "jobClass",
                        "in": "path",
                        "required": true,
                        "description": "The job class name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "jobId",
                        "in": "path",
                        "required": true,
                        "description": "The specific job instance ID to unlock",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "success",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/jobs/cleanup": {
            "post": {
                "operationId": "job.cleanup",
                "description": "Analyzes the job system for stuck locks and failed jobs, providing a summary\nof issues found. Can perform actual cleanup when dry_run is set to false.",
                "summary": "Get job cleanup summary and optionally perform cleanup",
                "tags": [
                    "Job"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "dryRun": {
                                        "type": "boolean",
                                        "default": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "stuck_locks": {
                                            "type": "object",
                                            "properties": {
                                                "count": {
                                                    "type": "integer"
                                                },
                                                "locks": {
                                                    "type": "array",
                                                    "items": {
                                                        "type": "object",
                                                        "properties": {
                                                            "key": {
                                                                "type": "string"
                                                            },
                                                            "ttl": {
                                                                "type": "integer"
                                                            },
                                                            "age_hours": {
                                                                "anyOf": [
                                                                    {
                                                                        "type": "integer"
                                                                    },
                                                                    {
                                                                        "type": "string"
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "required": [
                                                            "key",
                                                            "ttl",
                                                            "age_hours"
                                                        ]
                                                    }
                                                }
                                            },
                                            "required": [
                                                "count",
                                                "locks"
                                            ]
                                        },
                                        "failed_jobs": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "id": {
                                                        "type": "integer"
                                                    },
                                                    "uuid": {
                                                        "type": "string"
                                                    },
                                                    "connection": {
                                                        "type": "string"
                                                    },
                                                    "queue": {
                                                        "type": "string"
                                                    },
                                                    "payload": {
                                                        "type": "string"
                                                    },
                                                    "exception": {
                                                        "type": "string"
                                                    },
                                                    "failed_at": {
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "id",
                                                    "uuid",
                                                    "connection",
                                                    "queue",
                                                    "payload",
                                                    "exception",
                                                    "failed_at"
                                                ]
                                            }
                                        },
                                        "dry_run": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "stuck_locks",
                                        "failed_jobs",
                                        "dry_run"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/jobs/failed": {
            "post": {
                "operationId": "job.failed-cleanup",
                "description": "Removes failed jobs older than the specified time threshold from the\nfailed jobs table. Helps maintain system performance and storage efficiency.",
                "summary": "Clear failed jobs from the queue",
                "tags": [
                    "Job"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hoursOld": {
                                        "type": "integer",
                                        "default": 24
                                    },
                                    "dryRun": {
                                        "type": "boolean",
                                        "default": true
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "success",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/jobs/scanLibrary/{slug}": {
            "post": {
                "operationId": "job.library-scan",
                "description": "Dispatches a background job to scan a library for new media content.\nThe job type (music or movie) is automatically determined by the library type.",
                "summary": "Start a library scanning job",
                "tags": [
                    "Job"
                ],
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/-/horizon/api/metrics/jobs": {
            "get": {
                "operationId": "horizon.jobs-metrics.index",
                "summary": "Get all of the measured jobs",
                "tags": [
                    "JobMetrics"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/metrics/jobs/{id}": {
            "get": {
                "operationId": "horizon.jobs-metrics.show",
                "summary": "Get metrics for a given job",
                "tags": [
                    "JobMetrics"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/jobs/{id}": {
            "get": {
                "operationId": "horizon.jobs.show",
                "summary": "Get the details of a recent job by ID",
                "tags": [
                    "Jobs"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/lastfm/authorize": {
            "get": {
                "operationId": "lastfm.authorize",
                "tags": [
                    "LastFm"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "authUrl": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "authUrl"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "enum": [
                                                "Failed to get Last.fm token"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "error"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/services/lastfm/callback": {
            "get": {
                "operationId": "lastfm.callback",
                "tags": [
                    "LastFm"
                ],
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "description": "This is the new token from Last.fm",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "nonce",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "success"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "enum": [
                                                "Failed to get Last.fm session"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "error"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "State is already removed by Cache::pull(), so no cleanup needed",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "IP address mismatch"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "User agent mismatch"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Invalid nonce"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Invalid, expired, or already used authorization state"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Missing required parameters"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/lastfm/disconnect": {
            "post": {
                "operationId": "lastfm.disconnect",
                "tags": [
                    "LastFm"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "success"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/services/lastfm/status": {
            "get": {
                "operationId": "lastfm.status",
                "tags": [
                    "LastFm"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "connected": {
                                                    "type": "boolean"
                                                },
                                                "username": {
                                                    "type": "string"
                                                },
                                                "data": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "connected",
                                                "username",
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "connected": {
                                                    "type": "boolean"
                                                },
                                                "expired": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "required": [
                                                "connected",
                                                "expired"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "connected": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "required": [
                                                "connected"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/libraries": {
            "get": {
                "operationId": "libraries.index",
                "description": "Returns a paginated list of all available media libraries with basic information.\nDoes not include detailed statistics - use the show endpoint for comprehensive data.",
                "summary": "Get a paginated collection of media libraries",
                "tags": [
                    "Library"
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of `LibraryResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LibraryResource"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            },
            "post": {
                "operationId": "library.create",
                "description": "Creates a new library with the provided configuration. The library will be\navailable for media scanning after creation.",
                "summary": "Create a new media library",
                "tags": [
                    "Library"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateLibraryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`LibraryResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LibraryResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/libraries/{slug}": {
            "get": {
                "operationId": "library.show",
                "description": "Retrieves a single library by its slug identifier and includes both\nformatted (human-readable) and raw statistical data about the library's content.",
                "summary": "Show library with comprehensive statistics",
                "tags": [
                    "Library"
                ],
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "description": "The library's URL-friendly identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`LibraryStatsResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LibraryStatsResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            },
            "patch": {
                "operationId": "library.update",
                "description": "Updates library configuration using the provided slug identifier.\nOnly the fields included in the request will be updated.",
                "summary": "Update an existing library",
                "tags": [
                    "Library"
                ],
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "description": "The library's URL-friendly identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateLibraryRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`LibraryResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LibraryResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    }
                }
            },
            "delete": {
                "operationId": "library.delete",
                "description": "Permanently removes a library and all associated data. This action cannot be undone.\nMedia files on disk are not affected, only the library record is removed.",
                "summary": "Delete a library",
                "tags": [
                    "Library"
                ],
                "parameters": [
                    {
                        "name": "slug",
                        "in": "path",
                        "required": true,
                        "description": "The library's URL-friendly identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs": {
            "get": {
                "operationId": "logs.index",
                "description": "Returns a sorted list of all available log files in the system\nwith metadata including file sizes, modification dates, and identifiers.",
                "summary": "Get a collection of available log files",
                "tags": [
                    "Logs"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/LogFile"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs/{logFile}": {
            "get": {
                "operationId": "logs.show",
                "description": "Returns comprehensive metadata about a log file including file statistics,\nline counts, size information, and performance characteristics.",
                "summary": "Get detailed information about a specific log file",
                "tags": [
                    "Logs"
                ],
                "parameters": [
                    {
                        "name": "logFile",
                        "in": "path",
                        "required": true,
                        "description": "The log file identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "data": {
                                                    "type": "object",
                                                    "properties": {
                                                        "file": {
                                                            "$ref": "#/components/schemas/LogFile"
                                                        },
                                                        "info": {
                                                            "type": "object",
                                                            "properties": {
                                                                "size": {
                                                                    "type": "integer"
                                                                },
                                                                "lines": {
                                                                    "type": "integer"
                                                                },
                                                                "lastModified": {
                                                                    "type": "string"
                                                                },
                                                                "isLargeFile": {
                                                                    "type": "boolean"
                                                                },
                                                                "shouldUseThreading": {
                                                                    "type": "boolean"
                                                                }
                                                            },
                                                            "required": [
                                                                "size",
                                                                "lines",
                                                                "lastModified",
                                                                "isLargeFile",
                                                                "shouldUseThreading"
                                                            ]
                                                        }
                                                    },
                                                    "required": [
                                                        "file",
                                                        "info"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs/{logFile}/content": {
            "get": {
                "operationId": "logs.content",
                "description": "Retrieves log file content starting from a specific line number\nwith configurable line limits for efficient pagination through large files.",
                "summary": "Get paginated content from a log file",
                "tags": [
                    "Logs"
                ],
                "parameters": [
                    {
                        "name": "logFile",
                        "in": "path",
                        "required": true,
                        "description": "The log file identifier",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "after_line",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        }
                    },
                    {
                        "name": "max_lines",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 10000
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "data": {
                                                    "type": "object",
                                                    "properties": {
                                                        "lines": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "startLine": {
                                                            "type": "integer"
                                                        },
                                                        "endLine": {
                                                            "type": "integer"
                                                        },
                                                        "hasMore": {
                                                            "type": "boolean"
                                                        }
                                                    },
                                                    "required": [
                                                        "lines",
                                                        "startLine",
                                                        "endLine",
                                                        "hasMore"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs/{logFile}/lines": {
            "get": {
                "operationId": "logs.lines",
                "description": "Returns the total line count for a log file using optimized counting\nalgorithms that can handle very large files efficiently.",
                "summary": "Count total lines in a log file",
                "tags": [
                    "Logs"
                ],
                "parameters": [
                    {
                        "name": "logFile",
                        "in": "path",
                        "required": true,
                        "description": "The log file identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "data": {
                                                    "type": "object",
                                                    "properties": {
                                                        "file": {
                                                            "type": "string"
                                                        },
                                                        "totalLines": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "file",
                                                        "totalLines"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs/{logFile}/tail": {
            "get": {
                "operationId": "logs.tail",
                "description": "Returns the most recent lines from a log file, similar to the Unix tail command.\nUseful for monitoring recent activity and debugging current issues.",
                "summary": "Get the last N lines from a log file (tail functionality)",
                "tags": [
                    "Logs"
                ],
                "parameters": [
                    {
                        "name": "logFile",
                        "in": "path",
                        "required": true,
                        "description": "The log file identifier",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lines",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 1000
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "data": {
                                                    "type": "object",
                                                    "properties": {
                                                        "content": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "totalLines": {
                                                            "type": "integer"
                                                        },
                                                        "showingLines": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "content",
                                                        "totalLines",
                                                        "showingLines"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs/{logFile}/head": {
            "get": {
                "operationId": "logs.head",
                "description": "Returns the first lines from a log file, similar to the Unix head command.\nUseful for examining log file structure and initial entries.",
                "summary": "Get the first N lines from a log file (head functionality)",
                "tags": [
                    "Logs"
                ],
                "parameters": [
                    {
                        "name": "logFile",
                        "in": "path",
                        "required": true,
                        "description": "The log file identifier",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "lines",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 1000
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "data": {
                                                    "type": "object",
                                                    "properties": {
                                                        "content": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "string"
                                                            }
                                                        },
                                                        "showingLines": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "content",
                                                        "showingLines"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs/{logFile}/stats": {
            "get": {
                "operationId": "logs.stats",
                "description": "Analyzes log file content to provide detailed statistics including\nlog level counts, performance metrics, and optimization recommendations.",
                "summary": "Get comprehensive statistics for a log file",
                "tags": [
                    "Logs"
                ],
                "parameters": [
                    {
                        "name": "logFile",
                        "in": "path",
                        "required": true,
                        "description": "The log file identifier",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "data": {
                                                    "type": "object",
                                                    "properties": {
                                                        "fileInfo": {
                                                            "type": "object",
                                                            "properties": {
                                                                "size": {
                                                                    "type": "integer"
                                                                },
                                                                "lines": {
                                                                    "type": "integer"
                                                                },
                                                                "lastModified": {
                                                                    "type": "string"
                                                                }
                                                            },
                                                            "required": [
                                                                "size",
                                                                "lines",
                                                                "lastModified"
                                                            ]
                                                        },
                                                        "logLevels": {
                                                            "type": "object",
                                                            "properties": {
                                                                "error": {
                                                                    "type": "integer"
                                                                },
                                                                "warning": {
                                                                    "type": "integer"
                                                                },
                                                                "info": {
                                                                    "type": "integer"
                                                                },
                                                                "debug": {
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "required": [
                                                                "error",
                                                                "warning",
                                                                "info",
                                                                "debug"
                                                            ]
                                                        },
                                                        "performance": {
                                                            "type": "object",
                                                            "properties": {
                                                                "isLargeFile": {
                                                                    "type": "boolean"
                                                                },
                                                                "shouldUseThreading": {
                                                                    "type": "boolean"
                                                                },
                                                                "optimalThreads": {
                                                                    "type": "integer"
                                                                }
                                                            },
                                                            "required": [
                                                                "isLargeFile",
                                                                "shouldUseThreading",
                                                                "optimalThreads"
                                                            ]
                                                        }
                                                    },
                                                    "required": [
                                                        "fileInfo",
                                                        "logLevels",
                                                        "performance"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs/{logFile}/search": {
            "get": {
                "operationId": "logs.search",
                "description": "Performs high-performance pattern matching within log files with support\nfor case-sensitive/insensitive searches and configurable result limits.",
                "summary": "Search for patterns within a log file",
                "tags": [
                    "Logs"
                ],
                "parameters": [
                    {
                        "name": "logFile",
                        "in": "path",
                        "required": true,
                        "description": "The log file identifier to search",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 500
                        }
                    },
                    {
                        "name": "caseSensitive",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "maxResults",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 1000
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "data": {
                                                    "type": "object",
                                                    "properties": {
                                                        "pattern": {
                                                            "type": "string"
                                                        },
                                                        "caseSensitive": {
                                                            "type": "boolean"
                                                        },
                                                        "totalMatches": {
                                                            "type": "integer"
                                                        },
                                                        "searchTimeMs": {
                                                            "type": "number"
                                                        },
                                                        "results": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "lineNumber": {
                                                                        "type": "integer"
                                                                    },
                                                                    "content": {
                                                                        "type": "string"
                                                                    },
                                                                    "matchPosition": {
                                                                        "type": "integer"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "lineNumber",
                                                                    "content",
                                                                    "matchPosition"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    "required": [
                                                        "pattern",
                                                        "caseSensitive",
                                                        "totalMatches",
                                                        "searchTimeMs",
                                                        "results"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs/{logFile}/download": {
            "get": {
                "operationId": "logs.download",
                "description": "Provides direct download access to log files for offline analysis\nor archival purposes. Returns the file as a plain text download.",
                "summary": "Download a log file",
                "tags": [
                    "Logs"
                ],
                "parameters": [
                    {
                        "name": "logFile",
                        "in": "path",
                        "required": true,
                        "description": "The log file identifier to download",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object"
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/logs/search/all": {
            "get": {
                "operationId": "logs.search-all",
                "description": "Performs pattern matching across multiple log files in parallel,\nproviding consolidated search results with performance metrics\nand per-file result breakdowns.",
                "summary": "Search across multiple log files simultaneously",
                "tags": [
                    "Logs"
                ],
                "parameters": [
                    {
                        "name": "pattern",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 500
                        }
                    },
                    {
                        "name": "caseSensitive",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "maxResultsPerFile",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100
                        }
                    },
                    {
                        "name": "files[]",
                        "in": "query",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "data": {
                                                    "type": "object",
                                                    "properties": {
                                                        "pattern": {
                                                            "type": "string"
                                                        },
                                                        "caseSensitive": {
                                                            "type": "boolean"
                                                        },
                                                        "totalFilesSearched": {
                                                            "type": "integer"
                                                        },
                                                        "filesWithMatches": {
                                                            "type": "integer"
                                                        },
                                                        "totalMatches": {
                                                            "type": "integer"
                                                        },
                                                        "searchTimeMs": {
                                                            "type": "number"
                                                        },
                                                        "results": {
                                                            "type": "array",
                                                            "items": {
                                                                "type": "object",
                                                                "properties": {
                                                                    "file": {
                                                                        "$ref": "#/components/schemas/LogFile"
                                                                    },
                                                                    "results": {
                                                                        "type": "object",
                                                                        "properties": {
                                                                            "totalMatches": {
                                                                                "type": "integer"
                                                                            },
                                                                            "searchTimeMs": {
                                                                                "type": "number"
                                                                            },
                                                                            "matches": {
                                                                                "type": "array",
                                                                                "items": {
                                                                                    "type": "object",
                                                                                    "properties": {
                                                                                        "lineNumber": {
                                                                                            "type": "integer"
                                                                                        },
                                                                                        "content": {
                                                                                            "type": "string"
                                                                                        },
                                                                                        "matchPosition": {
                                                                                            "type": "integer"
                                                                                        }
                                                                                    },
                                                                                    "required": [
                                                                                        "lineNumber",
                                                                                        "content",
                                                                                        "matchPosition"
                                                                                    ]
                                                                                }
                                                                            }
                                                                        },
                                                                        "required": [
                                                                            "totalMatches",
                                                                            "searchTimeMs",
                                                                            "matches"
                                                                        ]
                                                                    }
                                                                },
                                                                "required": [
                                                                    "file",
                                                                    "results"
                                                                ]
                                                            }
                                                        }
                                                    },
                                                    "required": [
                                                        "pattern",
                                                        "caseSensitive",
                                                        "totalFilesSearched",
                                                        "filesWithMatches",
                                                        "totalMatches",
                                                        "searchTimeMs",
                                                        "results"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/-/horizon/api/masters": {
            "get": {
                "operationId": "horizon.masters.index",
                "summary": "Get all of the master supervisors and their underlying supervisors",
                "tags": [
                    "MasterSupervisor"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/metadata/search/album/{album}": {
            "get": {
                "operationId": "metadata.search.album",
                "description": "Looks up album in all providers",
                "summary": "Search for album",
                "tags": [
                    "MetadataSearch"
                ],
                "parameters": [
                    {
                        "name": "album",
                        "in": "path",
                        "required": true,
                        "description": "The album slug",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "discogs": {
                                            "type": "object",
                                            "properties": {
                                                "source": {
                                                    "type": "string",
                                                    "enum": [
                                                        "discogs"
                                                    ]
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/Release"
                                                    }
                                                },
                                                "quality_score": {
                                                    "type": "integer"
                                                },
                                                "search_results_count": {
                                                    "type": "integer"
                                                },
                                                "processed_results_count": {
                                                    "type": "integer"
                                                },
                                                "pagination": {
                                                    "type": "object",
                                                    "properties": {
                                                        "page": {
                                                            "type": "integer"
                                                        },
                                                        "pages": {
                                                            "type": "integer"
                                                        },
                                                        "items": {
                                                            "type": "integer"
                                                        },
                                                        "per_page": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "page",
                                                        "pages",
                                                        "items",
                                                        "per_page"
                                                    ]
                                                },
                                                "best_match": {
                                                    "$ref": "#/components/schemas/Release"
                                                }
                                            },
                                            "required": [
                                                "source",
                                                "data",
                                                "quality_score",
                                                "search_results_count",
                                                "processed_results_count",
                                                "pagination",
                                                "best_match"
                                            ]
                                        },
                                        "musicbrainz": {
                                            "type": "object",
                                            "properties": {
                                                "source": {
                                                    "type": "string",
                                                    "enum": [
                                                        "musicbrainz"
                                                    ]
                                                },
                                                "data": {
                                                    "type": "array",
                                                    "items": {
                                                        "$ref": "#/components/schemas/App.Http.Integrations.MusicBrainz.Models.Release"
                                                    }
                                                },
                                                "quality_score": {
                                                    "type": "integer"
                                                },
                                                "search_results_count": {
                                                    "type": "integer"
                                                },
                                                "processed_results_count": {
                                                    "type": "integer"
                                                },
                                                "best_match": {
                                                    "$ref": "#/components/schemas/App.Http.Integrations.MusicBrainz.Models.Release"
                                                }
                                            },
                                            "required": [
                                                "source",
                                                "data",
                                                "quality_score",
                                                "search_results_count",
                                                "processed_results_count",
                                                "best_match"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "discogs",
                                        "musicbrainz"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/metadata/search/album/{album}/fuzzy": {
            "get": {
                "operationId": "metadata.search-fuzzy.album",
                "description": "Generates title variations based on the album name and then searches in all providers",
                "summary": "Search for album (fuzzy)",
                "tags": [
                    "MetadataSearch"
                ],
                "parameters": [
                    {
                        "name": "album",
                        "in": "path",
                        "required": true,
                        "description": "The album slug",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "total_results": {
                                            "type": "integer"
                                        },
                                        "variations_tried": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "results": {
                                            "type": "array",
                                            "items": {
                                                "anyOf": [
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "source": {
                                                                "type": "string",
                                                                "enum": [
                                                                    "discogs"
                                                                ]
                                                            },
                                                            "variation_used": {
                                                                "type": "string"
                                                            },
                                                            "data": {
                                                                "$ref": "#/components/schemas/Release"
                                                            },
                                                            "raw_result": {
                                                                "type": "array",
                                                                "items": {}
                                                            },
                                                            "quality_score": {
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "source",
                                                            "variation_used",
                                                            "data",
                                                            "raw_result",
                                                            "quality_score"
                                                        ]
                                                    },
                                                    {
                                                        "type": "object",
                                                        "properties": {
                                                            "id": {
                                                                "type": "string"
                                                            },
                                                            "source": {
                                                                "type": "string",
                                                                "enum": [
                                                                    "musicbrainz"
                                                                ]
                                                            },
                                                            "variation_used": {
                                                                "type": "string"
                                                            },
                                                            "data": {
                                                                "$ref": "#/components/schemas/App.Http.Integrations.MusicBrainz.Models.Release"
                                                            },
                                                            "raw_result": {
                                                                "type": "array",
                                                                "items": {}
                                                            },
                                                            "quality_score": {
                                                                "type": "integer"
                                                            }
                                                        },
                                                        "required": [
                                                            "id",
                                                            "source",
                                                            "variation_used",
                                                            "data",
                                                            "raw_result",
                                                            "quality_score"
                                                        ]
                                                    }
                                                ]
                                            }
                                        },
                                        "best_match": {
                                            "anyOf": [
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "id": {
                                                            "type": "string"
                                                        },
                                                        "source": {
                                                            "type": "string",
                                                            "enum": [
                                                                "discogs"
                                                            ]
                                                        },
                                                        "variation_used": {
                                                            "type": "string"
                                                        },
                                                        "data": {
                                                            "$ref": "#/components/schemas/Release"
                                                        },
                                                        "raw_result": {
                                                            "type": "array",
                                                            "items": {}
                                                        },
                                                        "quality_score": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "id",
                                                        "source",
                                                        "variation_used",
                                                        "data",
                                                        "raw_result",
                                                        "quality_score"
                                                    ]
                                                },
                                                {
                                                    "type": "object",
                                                    "properties": {
                                                        "id": {
                                                            "type": "string"
                                                        },
                                                        "source": {
                                                            "type": "string",
                                                            "enum": [
                                                                "musicbrainz"
                                                            ]
                                                        },
                                                        "variation_used": {
                                                            "type": "string"
                                                        },
                                                        "data": {
                                                            "$ref": "#/components/schemas/App.Http.Integrations.MusicBrainz.Models.Release"
                                                        },
                                                        "raw_result": {
                                                            "type": "array",
                                                            "items": {}
                                                        },
                                                        "quality_score": {
                                                            "type": "integer"
                                                        }
                                                    },
                                                    "required": [
                                                        "id",
                                                        "source",
                                                        "variation_used",
                                                        "data",
                                                        "raw_result",
                                                        "quality_score"
                                                    ]
                                                }
                                            ]
                                        }
                                    },
                                    "required": [
                                        "total_results",
                                        "variations_tried",
                                        "results",
                                        "best_match"
                                    ]
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/-/horizon/api/monitoring": {
            "get": {
                "operationId": "horizon.monitoring.index",
                "summary": "Get all of the monitored tags and their job counts",
                "tags": [
                    "Monitoring"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "operationId": "horizon.monitoring.store",
                "summary": "Start monitoring the given tag",
                "tags": [
                    "Monitoring"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/monitoring/{tag}": {
            "get": {
                "operationId": "horizon.monitoring-tag.paginate",
                "summary": "Paginate the jobs for a given tag",
                "tags": [
                    "Monitoring"
                ],
                "parameters": [
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": 25
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jobs": {
                                            "type": "string"
                                        },
                                        "total": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "jobs",
                                        "total"
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "operationId": "horizon.monitoring-tag.destroy",
                "summary": "Stop monitoring the given tag",
                "tags": [
                    "Monitoring"
                ],
                "parameters": [
                    {
                        "name": "tag",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/libraries/{library}/movies": {
            "get": {
                "operationId": "movies.index",
                "description": "Returns a paginated list of all movies contained within the specified video library.\nMovies are filtered by the library to ensure only content from the requested library is returned.",
                "summary": "Get a paginated collection of movies from a specific library",
                "tags": [
                    "Movie"
                ],
                "parameters": [
                    {
                        "name": "library",
                        "in": "path",
                        "required": true,
                        "description": "The video library to retrieve movies from",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of `MovieResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/MovieResource"
                                    }
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/libraries/{library}/movies/{movie}": {
            "get": {
                "operationId": "movies.show",
                "description": "Retrieves a single movie from the specified library with comprehensive\ninformation including cast, crew, genres, technical details, and metadata.",
                "summary": "Get a specific movie with detailed information",
                "tags": [
                    "Movie"
                ],
                "parameters": [
                    {
                        "name": "library",
                        "in": "path",
                        "required": true,
                        "description": "The library containing the movie",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "movie",
                        "in": "path",
                        "required": true,
                        "description": "The movie to retrieve",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`MovieResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MovieResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/opcache/status": {
            "get": {
                "operationId": "opCache.getStatus",
                "summary": "Get status",
                "tags": [
                    "OpCache"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "opcache_enabled": {
                                            "type": "boolean"
                                        },
                                        "file_cache": {
                                            "type": "string"
                                        },
                                        "file_cache_only": {
                                            "type": "boolean"
                                        },
                                        "cache_full": {
                                            "type": "boolean"
                                        },
                                        "restart_pending": {
                                            "type": "boolean"
                                        },
                                        "restart_in_progress": {
                                            "type": "boolean"
                                        },
                                        "memory_usage": {
                                            "type": "object",
                                            "properties": {
                                                "used_memory": {
                                                    "type": "integer"
                                                },
                                                "free_memory": {
                                                    "type": "integer"
                                                },
                                                "wasted_memory": {
                                                    "type": "integer"
                                                },
                                                "current_wasted_percentage": {
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "used_memory",
                                                "free_memory",
                                                "wasted_memory",
                                                "current_wasted_percentage"
                                            ]
                                        },
                                        "interned_strings_usage": {
                                            "type": "object",
                                            "properties": {
                                                "buffer_size": {
                                                    "type": "integer"
                                                },
                                                "used_memory": {
                                                    "type": "integer"
                                                },
                                                "free_memory": {
                                                    "type": "integer"
                                                },
                                                "number_of_strings": {
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "buffer_size",
                                                "used_memory",
                                                "free_memory",
                                                "number_of_strings"
                                            ]
                                        },
                                        "opcache_statistics": {
                                            "type": "object",
                                            "properties": {
                                                "num_cached_scripts": {
                                                    "type": "integer"
                                                },
                                                "num_cached_keys": {
                                                    "type": "integer"
                                                },
                                                "max_cached_keys": {
                                                    "type": "integer"
                                                },
                                                "hits": {
                                                    "type": "integer"
                                                },
                                                "start_time": {
                                                    "type": "integer"
                                                },
                                                "last_restart_time": {
                                                    "type": "integer"
                                                },
                                                "oom_restarts": {
                                                    "type": "integer"
                                                },
                                                "hash_restarts": {
                                                    "type": "integer"
                                                },
                                                "manual_restarts": {
                                                    "type": "integer"
                                                },
                                                "misses": {
                                                    "type": "integer"
                                                },
                                                "blacklist_misses": {
                                                    "type": "integer"
                                                },
                                                "blacklist_miss_ratio": {
                                                    "type": "integer"
                                                },
                                                "opcache_hit_rate": {
                                                    "type": "number"
                                                }
                                            },
                                            "required": [
                                                "num_cached_scripts",
                                                "num_cached_keys",
                                                "max_cached_keys",
                                                "hits",
                                                "start_time",
                                                "last_restart_time",
                                                "oom_restarts",
                                                "hash_restarts",
                                                "manual_restarts",
                                                "misses",
                                                "blacklist_misses",
                                                "blacklist_miss_ratio",
                                                "opcache_hit_rate"
                                            ]
                                        },
                                        "jit": {
                                            "type": "object",
                                            "properties": {
                                                "enabled": {
                                                    "type": "boolean"
                                                },
                                                "on": {
                                                    "type": "boolean"
                                                },
                                                "kind": {
                                                    "type": "integer"
                                                },
                                                "opt_level": {
                                                    "type": "integer"
                                                },
                                                "opt_flags": {
                                                    "type": "integer"
                                                },
                                                "buffer_size": {
                                                    "type": "integer"
                                                },
                                                "buffer_free": {
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "enabled",
                                                "on",
                                                "kind",
                                                "opt_level",
                                                "opt_flags",
                                                "buffer_size",
                                                "buffer_free"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "opcache_enabled",
                                        "file_cache",
                                        "file_cache_only",
                                        "cache_full",
                                        "restart_pending",
                                        "restart_in_progress",
                                        "memory_usage",
                                        "interned_strings_usage",
                                        "opcache_statistics",
                                        "jit"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/opcache/config": {
            "get": {
                "operationId": "opcache.getConfig",
                "summary": "Get config",
                "tags": [
                    "OpCache"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "directives": {
                                            "type": "object",
                                            "properties": {
                                                "property": {
                                                    "anyOf": [
                                                        {
                                                            "type": "integer"
                                                        },
                                                        {
                                                            "type": "number"
                                                        },
                                                        {
                                                            "type": "boolean"
                                                        },
                                                        {
                                                            "type": "string"
                                                        }
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "property"
                                            ]
                                        },
                                        "version": {
                                            "type": "object",
                                            "properties": {
                                                "version": {
                                                    "type": "string"
                                                },
                                                "opcache_product_name": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "version",
                                                "opcache_product_name"
                                            ]
                                        },
                                        "blacklist": {
                                            "type": "array",
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    },
                                    "required": [
                                        "directives",
                                        "version",
                                        "blacklist"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/opcache/clear": {
            "post": {
                "operationId": "opcache.clear",
                "summary": "Clear",
                "tags": [
                    "OpCache"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "success"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/opcache/compile": {
            "post": {
                "operationId": "opcache.compile",
                "summary": "Compile cache",
                "tags": [
                    "OpCache"
                ],
                "parameters": [
                    {
                        "name": "force",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "totalFiles": {
                                            "type": "integer"
                                        },
                                        "compiled": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "totalFiles",
                                        "compiled"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/-/horizon/api/jobs/pending": {
            "get": {
                "operationId": "horizon.pending-jobs.index",
                "summary": "Get all of the pending jobs",
                "tags": [
                    "PendingJobs"
                ],
                "parameters": [
                    {
                        "name": "starting_at",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jobs": {
                                            "type": "string"
                                        },
                                        "total": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "jobs",
                                        "total"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/playlists": {
            "get": {
                "operationId": "playlist.index",
                "description": "Returns playlists owned by the authenticated user and public playlists\nthat are visible to all users. Results are paginated for performance.",
                "summary": "Get a paginated collection of playlists",
                "tags": [
                    "Playlist"
                ],
                "responses": {
                    "200": {
                        "description": "Paginated set of `PlaylistResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/components/schemas/PlaylistResource"
                                            }
                                        },
                                        "links": {
                                            "type": "object",
                                            "properties": {
                                                "first": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "last": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "prev": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                },
                                                "next": {
                                                    "type": [
                                                        "string",
                                                        "null"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "first",
                                                "last",
                                                "prev",
                                                "next"
                                            ]
                                        },
                                        "meta": {
                                            "type": "object"
                                        }
                                    },
                                    "required": [
                                        "data",
                                        "meta",
                                        "links"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            },
            "post": {
                "operationId": "playlist.store",
                "description": "Creates a new playlist owned by the authenticated user with the provided\nname, description, and visibility settings.",
                "summary": "Create a new playlist",
                "tags": [
                    "Playlist"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreatePlaylistRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`PlaylistResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaylistResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}": {
            "get": {
                "operationId": "playlist.show",
                "description": "Retrieves a single playlist with comprehensive information including\nsongs, artists, album data, and cover art. Authorization is enforced.",
                "summary": "Get a specific playlist with detailed information",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist to retrieve",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "relations",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`PlaylistResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaylistResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            },
            "delete": {
                "operationId": "playlist.destroy",
                "description": "Permanently removes a playlist and all its associated data including\nsong associations, statistics, and collaborator relationships.",
                "summary": "Delete a playlist",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist to delete",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No content"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            },
            "put": {
                "operationId": "playlist.update",
                "description": "Updates playlist metadata including name, description, and visibility settings.\nOnly playlist owners and authorized collaborators can update playlists.",
                "summary": "Update an existing playlist",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist to update",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdatePlaylistRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`PlaylistResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaylistResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/songs/{song}": {
            "post": {
                "operationId": "playlist.add-song",
                "description": "Adds a song to the specified playlist at the next available position.\nPrevents duplicate songs from being added to the same playlist.",
                "summary": "Add a song to a playlist",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist to add the song to",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "song",
                        "in": "path",
                        "required": true,
                        "description": "The song to add",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            },
            "delete": {
                "operationId": "playlist.remove-song",
                "description": "Removes a song from the playlist and automatically reorders remaining\nsongs to maintain consecutive positioning.",
                "summary": "Remove a song from a playlist",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist to remove the song from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "song",
                        "in": "path",
                        "required": true,
                        "description": "The song to remove",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/reorder": {
            "post": {
                "operationId": "playlist.reorder",
                "description": "Updates the position of songs in the playlist based on the provided\nordered array of song IDs. All song IDs must exist in the playlist.",
                "summary": "Reorder songs in a playlist",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist to reorder",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "song_ids": {
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "required": [
                                    "song_ids"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/collaborators": {
            "post": {
                "operationId": "playlist.collaborators.store",
                "description": "Adds a user as a collaborator to the playlist with the specified role.\nCollaborators can have 'editor' or 'contributor' permissions.",
                "summary": "Add a collaborator to a playlist",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist public id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "user_id": {
                                        "type": "integer"
                                    },
                                    "role": {
                                        "type": "string",
                                        "enum": [
                                            "editor",
                                            "contributor"
                                        ]
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "enum": [
                                                "Collaborator added"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/collaborators/{user}": {
            "delete": {
                "operationId": "playlist.collaborators.destroy",
                "description": "Removes a user's collaborator access from the playlist.\nOnly playlist owners can remove collaborators.",
                "summary": "Remove a collaborator from a playlist",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist public id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "description": "The user public id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "enum": [
                                                "Collaborator removed"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/clone": {
            "post": {
                "operationId": "playlist.clone",
                "description": "Creates a copy of the playlist with all songs and their positions.\nThe cloned playlist is owned by the current user and is private by default.",
                "summary": "Clone an existing playlist",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist public id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`PlaylistResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaylistResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/statistics": {
            "get": {
                "operationId": "playlist.statistics",
                "description": "Retrieves comprehensive statistics for the playlist including\nview count, play count, shares, and favorites.",
                "summary": "Get playlist statistics",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist public id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`PlaylistStatistic`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaylistStatistic"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/statistics/record/view": {
            "post": {
                "operationId": "playlist.statistics.record-view",
                "summary": "Record a playlist view",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist public id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "enum": [
                                                "View recorded"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/statistics/record/play": {
            "post": {
                "operationId": "playlist.statistics.record-play",
                "description": "Increments the play counter when the playlist is played.\nUsed for tracking playlist engagement and popularity metrics.",
                "summary": "Record a playlist play",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist that was played",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/statistics/record/share": {
            "post": {
                "operationId": "playlist.statistics.record-share",
                "description": "Increments the share counter when the playlist is shared.\nUsed for tracking viral and social engagement metrics.",
                "summary": "Record a playlist share",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist that was shared",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/statistics/record/favorite": {
            "post": {
                "operationId": "playlist.statistics.record-favorite",
                "description": "Increments the favorite counter when users mark the playlist as favorite.\nUsed for tracking user engagement and playlist quality metrics.",
                "summary": "Record a playlist favorite",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist that was favorited",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/playlists/smart": {
            "post": {
                "operationId": "playlist.smart-create",
                "description": "Creates a new smart playlist that automatically populates with songs\nmatching the specified rules and criteria.",
                "summary": "Create a smart playlist",
                "tags": [
                    "Playlist"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateSmartPlaylistRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`PlaylistResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaylistResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/smart": {
            "put": {
                "operationId": "playlist.smart-update",
                "description": "Manually triggers a sync of the smart playlist to refresh the song list\nbased on the current rules and available songs in the library.",
                "summary": "Synchronize smart playlist",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist public id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateSmartPlaylistRulesRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`PlaylistResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlaylistResource"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "An error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Error overview.",
                                            "example": "Not a smart playlist"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/playlists/{playlist}/smart/sync": {
            "post": {
                "operationId": "playlist.smart-sync",
                "description": "Updates the rules for a smart playlist and re-syncs the song list\nto match the new criteria.",
                "summary": "Update smart playlist rules",
                "tags": [
                    "Playlist"
                ],
                "parameters": [
                    {
                        "name": "playlist",
                        "in": "path",
                        "required": true,
                        "description": "The playlist public id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "enum": [
                                                "Smart playlist synced"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "An error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Error overview.",
                                            "example": "Not a smart playlist"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/queue-metrics": {
            "get": {
                "operationId": "queue-metrics.show",
                "description": "Returns filtered and paginated queue job monitoring data with support for\nfiltering by status, queue name, job name, and custom ordering options.\nProvides comprehensive job execution tracking and debugging information.",
                "summary": "Get paginated collection of queue monitor entries",
                "tags": [
                    "Queue"
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "enum": [
                                "running",
                                "succeeded",
                                "failed",
                                "stale",
                                "queued"
                            ]
                        }
                    },
                    {
                        "name": "queue",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "name",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "queuedFirst",
                        "in": "query",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of `QueueMonitorResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/QueueMonitorResource"
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/queue-metrics/queues": {
            "get": {
                "operationId": "queue-metrics.queues",
                "description": "Returns a distinct list of all queue names currently in the monitoring system.\nUseful for populating filter dropdowns and understanding queue structure.",
                "summary": "Get list of all available queue names",
                "tags": [
                    "Queue"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "name"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/queue-metrics/metrics": {
            "get": {
                "operationId": "queue-metrics.metrics",
                "description": "Returns detailed metrics about queue performance including job counts,\nexecution times, failure rates, and trend analysis over the specified\ntime period for system monitoring and optimization.",
                "summary": "Get comprehensive queue metrics and statistics",
                "tags": [
                    "Queue"
                ],
                "parameters": [
                    {
                        "name": "aggregateDays",
                        "in": "query",
                        "schema": {
                            "type": "integer",
                            "default": "14\n\nDays to aggregate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "title": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "number"
                                            },
                                            "previousValue": {
                                                "type": [
                                                    "integer",
                                                    "null"
                                                ]
                                            },
                                            "format": {
                                                "type": "string"
                                            },
                                            "formattedValue": {
                                                "type": "string"
                                            },
                                            "formattedPreviousValue": {
                                                "type": [
                                                    "string",
                                                    "null"
                                                ]
                                            }
                                        },
                                        "required": [
                                            "title",
                                            "value",
                                            "previousValue",
                                            "format",
                                            "formattedValue",
                                            "formattedPreviousValue"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/queue-metrics/retry/{id}": {
            "post": {
                "operationId": "queue-metrics.retry-job",
                "description": "Attempts to retry a previously failed job by re-dispatching it to the queue.\nOnly failed jobs that haven't been retried and have valid job UUIDs can be retried.\nIncludes safety checks and error handling.",
                "summary": "Retry a failed queue job",
                "tags": [
                    "Queue"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "The queue monitor ID of the job to retry",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RetryJobRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "status": {
                                            "type": "string"
                                        },
                                        "message": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "status",
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "An error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Error overview.",
                                            "example": "Job cannot be retried"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/queue-metrics/{id}": {
            "delete": {
                "operationId": "queue-metrics.delete",
                "description": "Permanently removes a queue monitor record from the system.\nThis only affects monitoring data and does not impact actual queue jobs.\nUsed for cleaning up monitoring history.",
                "summary": "Delete a specific queue monitor entry",
                "tags": [
                    "Queue"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "description": "The queue monitor ID to delete",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Queue monitor entry successfully deleted - no content returned.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/queue-metrics/purge": {
            "delete": {
                "operationId": "queue-metrics.purge",
                "description": "Completely clears all queue monitoring data from the system.\nThis is a destructive operation that removes all historical job tracking\ninformation. Use with extreme caution in production environments.",
                "summary": "Purge all queue monitor records",
                "tags": [
                    "Queue"
                ],
                "responses": {
                    "204": {
                        "description": "All queue monitor records successfully purged - no content returned.\n\n\n\nNo content"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/-/horizon/api/metrics/queues": {
            "get": {
                "operationId": "horizon.queues-metrics.index",
                "summary": "Get all of the measured queues",
                "tags": [
                    "QueueMetrics"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/metrics/queues/{id}": {
            "get": {
                "operationId": "horizon.queues-metrics.show",
                "summary": "Get metrics for a given queue",
                "tags": [
                    "QueueMetrics"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/jobs/retry/{id}": {
            "post": {
                "operationId": "horizon.retry-jobs.show",
                "summary": "Retry a failed job",
                "tags": [
                    "Retry"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/schemas/musicbrainz": {
            "get": {
                "operationId": "schema.fetchSchema",
                "tags": [
                    "Schema"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "array",
                                        "items": {}
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/-/horizon/api/jobs/silenced": {
            "get": {
                "operationId": "horizon.silenced-jobs.index",
                "summary": "Get all of the silenced jobs",
                "tags": [
                    "SilencedJobs"
                ],
                "parameters": [
                    {
                        "name": "starting_at",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "jobs": {
                                            "type": "string"
                                        },
                                        "total": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "jobs",
                                        "total"
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/libraries/{library}/songs": {
            "get": {
                "operationId": "songs.index",
                "description": "Returns a filtered and paginated list of songs from the specified library.\nSupports relation inclusion and genre filtering. Songs are ordered by album title\nand track number for a consistent browsing experience.",
                "summary": "Get a paginated collection of songs from a specific library",
                "tags": [
                    "Song"
                ],
                "parameters": [
                    {
                        "name": "library",
                        "in": "path",
                        "required": true,
                        "description": "The library to retrieve songs from",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "genreNames",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "genreSlugs",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "relations",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of `SongResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/SongResource"
                                    }
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "An error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string",
                                            "description": "Error overview.",
                                            "example": "You cannot search for genre names and slugs at the same time"
                                        }
                                    },
                                    "required": [
                                        "message"
                                    ]
                                }
                            }
                        }
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/libraries/{library}/songs/{publicId}": {
            "get": {
                "operationId": "songs.show",
                "description": "Retrieves a single song from the specified library using its public ID.\nSupports relation inclusion for comprehensive song information including\nartists, album data, genres, and audio metadata.",
                "summary": "Get a specific song by its public identifier",
                "tags": [
                    "Song"
                ],
                "parameters": [
                    {
                        "name": "library",
                        "in": "path",
                        "required": true,
                        "description": "The library containing the song",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "publicId",
                        "in": "path",
                        "required": true,
                        "description": "The public identifier of the song to retrieve",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "relations",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`SongResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SongResource"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/services/spotify/authorize": {
            "get": {
                "operationId": "spotify.authorize",
                "tags": [
                    "Spotify"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "authUrl": {
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "authUrl"
                                    ]
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "enum": [
                                                "Spotify client ID not configured"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "error"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/services/spotify/callback": {
            "get": {
                "operationId": "spotify.callback",
                "tags": [
                    "Spotify"
                ],
                "parameters": [
                    {
                        "name": "code",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "state",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "error",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Failed to connect to Spotify"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Failed to get access token"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "success"
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "IP address mismatch"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "User agent mismatch"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Invalid, expired, or already used authorization state"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string",
                                                    "enum": [
                                                        "Missing required parameters"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "error": {
                                                    "type": "string"
                                                }
                                            },
                                            "required": [
                                                "error"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/api/services/spotify/disconnect": {
            "post": {
                "operationId": "spotify.disconnect",
                "tags": [
                    "Spotify"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "success": {
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "success"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/services/spotify/status": {
            "get": {
                "operationId": "spotify.status",
                "tags": [
                    "Spotify"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "anyOf": [
                                        {
                                            "type": "object",
                                            "properties": {
                                                "connected": {
                                                    "type": "boolean"
                                                },
                                                "username": {
                                                    "type": "string"
                                                },
                                                "data": {
                                                    "type": "object",
                                                    "properties": {
                                                        "spotify_user_id": {
                                                            "type": "string"
                                                        },
                                                        "email": {
                                                            "type": "string"
                                                        },
                                                        "country": {
                                                            "type": "string"
                                                        },
                                                        "followers": {
                                                            "type": "string"
                                                        },
                                                        "product": {
                                                            "type": "string"
                                                        },
                                                        "images": {
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "spotify_user_id",
                                                        "email",
                                                        "country",
                                                        "followers",
                                                        "product",
                                                        "images"
                                                    ]
                                                }
                                            },
                                            "required": [
                                                "connected",
                                                "username",
                                                "data"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "connected": {
                                                    "type": "boolean"
                                                },
                                                "expired": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "required": [
                                                "connected",
                                                "expired"
                                            ]
                                        },
                                        {
                                            "type": "object",
                                            "properties": {
                                                "connected": {
                                                    "type": "boolean"
                                                }
                                            },
                                            "required": [
                                                "connected"
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/services/spotify/user/profile": {
            "get": {
                "operationId": "spotify.user.profile",
                "tags": [
                    "Spotify"
                ],
                "responses": {
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "enum": [
                                                "Failed to get user profile"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "error"
                                    ]
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/services/spotify/user/playlists": {
            "get": {
                "operationId": "spotify.user.playlists",
                "tags": [
                    "Spotify"
                ],
                "parameters": [
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": 20
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": 0
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "enum": [
                                                "Failed to get playlists"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "error"
                                    ]
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/services/spotify/search": {
            "get": {
                "operationId": "spotify.search",
                "tags": [
                    "Spotify"
                ],
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": "track"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": 20
                        }
                    },
                    {
                        "name": "offset",
                        "in": "query",
                        "schema": {
                            "type": "string",
                            "default": 0
                        }
                    },
                    {
                        "name": "market",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "enum": [
                                                "Search failed"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "error"
                                    ]
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "enum": [
                                                "Query parameter is required"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "error"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/services/spotify/genres/seeds": {
            "get": {
                "operationId": "spotify.genres.seeds",
                "tags": [
                    "Spotify"
                ],
                "responses": {
                    "500": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "error": {
                                            "type": "string",
                                            "enum": [
                                                "Failed to get genre seeds"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "error"
                                    ]
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/stream/song/{song}/direct": {
            "get": {
                "operationId": "stream.song-direct",
                "summary": "Direct stream the song.\nRequires token with \"access-stream\"",
                "tags": [
                    "Stream"
                ],
                "parameters": [
                    {
                        "name": "song",
                        "in": "path",
                        "required": true,
                        "description": "The song public id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/octet-stream": {
                                "schema": {
                                    "type": "string",
                                    "format": "binary"
                                }
                            }
                        }
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/system-info": {
            "get": {
                "operationId": "system-info.php",
                "summary": "Get php info",
                "tags": [
                    "SystemInfo"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "section": {
                                                "type": "string"
                                            },
                                            "values": {
                                                "type": "array",
                                                "items": {
                                                    "type": "object",
                                                    "properties": {
                                                        "key": {
                                                            "type": "string"
                                                        },
                                                        "value": {
                                                            "anyOf": [
                                                                {
                                                                    "type": "string"
                                                                },
                                                                {
                                                                    "type": "integer"
                                                                },
                                                                {
                                                                    "type": "boolean"
                                                                },
                                                                {
                                                                    "type": "number"
                                                                },
                                                                {
                                                                    "type": "null"
                                                                }
                                                            ]
                                                        }
                                                    },
                                                    "required": [
                                                        "key",
                                                        "value"
                                                    ]
                                                }
                                            }
                                        },
                                        "required": [
                                            "section",
                                            "values"
                                        ]
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/system-info/sys": {
            "get": {
                "operationId": "system-info.sys",
                "tags": [
                    "SystemInfo"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "memoryUsage": {
                                            "type": "integer"
                                        },
                                        "systemLoadAverage": {
                                            "type": "array",
                                            "items": {
                                                "type": "integer"
                                            }
                                        },
                                        "swooleVm": {
                                            "type": "object",
                                            "properties": {
                                                "object_num": {
                                                    "type": "integer"
                                                },
                                                "resource_num": {
                                                    "type": "integer"
                                                }
                                            },
                                            "required": [
                                                "object_num",
                                                "resource_num"
                                            ]
                                        }
                                    },
                                    "required": [
                                        "memoryUsage",
                                        "systemLoadAverage",
                                        "swooleVm"
                                    ]
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/users": {
            "get": {
                "operationId": "users.index",
                "description": "Returns a filtered and paginated list of all users in the system.\nSupports global search across name and email fields, plus advanced filtering\noptions for administrative user management.",
                "summary": "Get a paginated collection of users",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "limit",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "globalFilter",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filters",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "filterModes",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "sorting",
                        "in": "query",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of `UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/UserResource"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            },
            "post": {
                "operationId": "users.store",
                "description": "Administrative endpoint that allows authorized users to create new user accounts\nwith specified roles and permissions. Created users will receive email verification.",
                "summary": "Create a new user account",
                "tags": [
                    "User"
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CreateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/users/{user}": {
            "patch": {
                "operationId": "users.update",
                "description": "Updates user information including profile data, roles, and permissions.\nUsers can update their own profiles, while administrators can update any user.",
                "summary": "Update an existing user",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "description": "The user to update",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "`UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            },
            "get": {
                "operationId": "users.show",
                "description": "Retrieves public profile information for a specific user.\nSensitive information is filtered based on privacy settings and permissions.",
                "summary": "Get a specific user's public profile",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "description": "The user to retrieve",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "`UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResource"
                                }
                            }
                        }
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            },
            "delete": {
                "operationId": "users.destroy",
                "description": "Permanently removes a user account and all associated data. This action\ncannot be undone. All user tokens are revoked and associated content is handled\naccording to the configured deletion policy.",
                "summary": "Delete a user account",
                "tags": [
                    "User"
                ],
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "description": "The user to delete",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User successfully deleted - no content returned.\n\n\n\nNo content"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/users/me": {
            "get": {
                "operationId": "users.me",
                "description": "Returns the profile information of the currently authenticated user\nincluding roles, permissions, and associated libraries.",
                "summary": "Get authenticated user profile",
                "tags": [
                    "User"
                ],
                "responses": {
                    "200": {
                        "description": "`UserResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserResource"
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/api/users/tokens/{user}": {
            "get": {
                "operationId": "user-tokens.index",
                "description": "Returns all active tokens for the authenticated user including detailed\nsecurity information such as device details, IP history, location data,\nand usage statistics for session management.",
                "summary": "Get a paginated collection of user's personal access tokens",
                "tags": [
                    "UserToken"
                ],
                "parameters": [
                    {
                        "name": "user",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "page",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "perPage",
                        "in": "query",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of `PersonalAccessTokenViewResource`",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/PersonalAccessTokenViewResource"
                                    }
                                }
                            }
                        }
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    },
                    "422": {
                        "$ref": "#/components/responses/ValidationException"
                    }
                }
            }
        },
        "/api/users/tokens/{token}": {
            "delete": {
                "operationId": "user-tokens.revoke",
                "description": "Permanently revokes a personal access token, ending the associated session.\nUsers can only revoke their own tokens. Includes security validation to\nprevent unauthorized token revocation.",
                "summary": "Revoke a specific personal access token",
                "tags": [
                    "UserToken"
                ],
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "required": true,
                        "description": "The token to revoke",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Token successfully revoked - no content returned.\n\n\n\nNo content"
                    },
                    "403": {
                        "$ref": "#/components/responses/AuthorizationException"
                    },
                    "404": {
                        "$ref": "#/components/responses/ModelNotFoundException"
                    },
                    "401": {
                        "$ref": "#/components/responses/AuthenticationException"
                    }
                }
            }
        },
        "/-/horizon/api/workload": {
            "get": {
                "operationId": "horizon.workload.index",
                "summary": "Get the current queue workload for the application",
                "tags": [
                    "Workload"
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {}
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "securitySchemes": {
            "http": {
                "type": "http",
                "description": "### Access token\nOnly tokens with the ability 'access-api' will have access to the endpoints. Access tokens have a lifetime of 1h.\n\n### Stream token\nStream tokens can only be used for accessing media streams. Stream tokens have a lifetime of 1d.\n\n### Refresh token\nThe refresh token has the 'issue-access-token' ability. Refresh tokens have a lifetime of 7d.\nIt can be used to refresh access and stream tokens.\n\n#### Tip\n\nTokens can be used as a query parameter in cases where its not possible to add a header (e.g. mp3 streaming in the browser). Append the query parameter `_token=YOUR_TOKEN`.",
                "scheme": "bearer"
            }
        },
        "schemas": {
            "AlbumResource": {
                "type": "object",
                "properties": {
                    "publicId": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "year": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "type": {
                        "$ref": "#/components/schemas/AlbumType"
                    },
                    "label": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "catalogNumber": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "barcode": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "country": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "language": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "disambiguation": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "annotation": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "spotifyId": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "mbid": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "discogsId": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "cover": {
                        "description": "Cover relation",
                        "$ref": "#/components/schemas/ImageResource"
                    },
                    "artists": {
                        "type": "array",
                        "description": "Album artists relation",
                        "items": {
                            "$ref": "#/components/schemas/ArtistResource"
                        }
                    },
                    "songs": {
                        "type": "array",
                        "description": "Songs relation",
                        "items": {
                            "$ref": "#/components/schemas/SongResource"
                        }
                    },
                    "genres": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "slug": {
                                    "type": "string"
                                },
                                "name": {
                                    "type": "string"
                                }
                            },
                            "required": [
                                "slug",
                                "name"
                            ]
                        }
                    }
                },
                "required": [
                    "publicId",
                    "title",
                    "year",
                    "type",
                    "label",
                    "catalogNumber",
                    "barcode",
                    "country",
                    "language",
                    "disambiguation",
                    "annotation",
                    "spotifyId",
                    "mbid",
                    "discogsId",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "AlbumResource"
            },
            "AlbumType": {
                "type": "string",
                "enum": [
                    "studio",
                    "live",
                    "compilation",
                    "soundtrack",
                    "remix",
                    "ep",
                    "single",
                    "demo",
                    "mixtape",
                    "bootleg",
                    "interview",
                    "audiobook",
                    "spoken_word",
                    "other"
                ],
                "title": "AlbumType"
            },
            "AlbumUpdateRequest": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                    },
                    "year": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 9999
                    },
                    "mbid": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                    },
                    "discogsId": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 999999999999
                    },
                    "genres": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "required": [
                    "title"
                ],
                "title": "AlbumUpdateRequest"
            },
            "AlbumWithoutSongsResource": {
                "type": "object",
                "properties": {
                    "publicId": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "year": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "cover": {
                        "description": "Cover relation",
                        "$ref": "#/components/schemas/ImageResource"
                    },
                    "artists": {
                        "description": "Album artist relation",
                        "$ref": "#/components/schemas/ArtistResource"
                    }
                },
                "required": [
                    "publicId",
                    "title",
                    "year",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "AlbumWithoutSongsResource"
            },
            "App.Http.Integrations.MusicBrainz.Models.Release": {
                "type": "object",
                "properties": {
                    "release": {
                        "type": "integer"
                    },
                    "id": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string"
                    },
                    "quality": {
                        "type": "string"
                    },
                    "annotation": {
                        "type": "string"
                    },
                    "text": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "entity": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "disambiguation": {
                        "type": "string"
                    },
                    "packaging": {
                        "type": "string"
                    },
                    "text_representation": {
                        "type": "array",
                        "items": {}
                    },
                    "language": {
                        "type": "string"
                    },
                    "script": {
                        "type": "string"
                    },
                    "artist_credit": {
                        "type": "array",
                        "items": {}
                    },
                    "count": {
                        "type": "integer"
                    },
                    "offset": {
                        "type": "integer"
                    },
                    "alias": {
                        "type": "array",
                        "items": {}
                    },
                    "locale": {
                        "type": "string"
                    },
                    "sort_name": {
                        "type": "string"
                    },
                    "type_id": {
                        "type": "string"
                    },
                    "primary": {
                        "type": "boolean"
                    },
                    "begin_date": {
                        "type": "string"
                    },
                    "end_date": {
                        "type": "string"
                    },
                    "release_group": {
                        "type": "array",
                        "items": {}
                    },
                    "first_release_date": {
                        "type": "string"
                    },
                    "primary_type": {
                        "type": "string"
                    },
                    "secondary_type": {
                        "type": "array",
                        "items": {}
                    },
                    "date": {
                        "type": "string"
                    },
                    "country": {
                        "type": "string"
                    },
                    "release_event": {
                        "type": "array",
                        "items": {}
                    },
                    "area": {
                        "type": "array",
                        "items": {}
                    },
                    "iso_3166_1_code": {
                        "type": "string"
                    },
                    "iso_3166_2_code": {
                        "type": "string"
                    },
                    "iso_3166_3_code": {
                        "type": "string"
                    },
                    "life_span": {
                        "type": "array",
                        "items": {}
                    },
                    "begin": {
                        "type": "string"
                    },
                    "end": {
                        "type": "string"
                    },
                    "ended": {
                        "type": "boolean"
                    },
                    "tag": {
                        "type": "array",
                        "items": {}
                    },
                    "user_tag": {
                        "type": "array",
                        "items": {}
                    },
                    "genre": {
                        "type": "array",
                        "items": {}
                    },
                    "target_type": {
                        "type": "string"
                    },
                    "relation": {
                        "type": "array",
                        "items": {}
                    },
                    "target": {
                        "type": "string"
                    },
                    "ordering_key": {
                        "type": "integer"
                    },
                    "direction": {
                        "type": "string"
                    },
                    "source_credit": {
                        "type": "string"
                    },
                    "target_credit": {
                        "type": "string"
                    },
                    "user_genre": {
                        "type": "array",
                        "items": {}
                    },
                    "barcode": {
                        "type": "string"
                    },
                    "asin": {
                        "type": "string"
                    },
                    "cover_art_archive": {
                        "type": "array",
                        "items": {}
                    },
                    "artwork": {
                        "type": "boolean"
                    },
                    "front": {
                        "type": "boolean"
                    },
                    "back": {
                        "type": "boolean"
                    },
                    "darkened": {
                        "type": "boolean"
                    },
                    "label_info": {
                        "type": "array",
                        "items": {}
                    },
                    "catalog_number": {
                        "type": "string"
                    },
                    "label": {
                        "type": "array",
                        "items": {}
                    },
                    "label_code": {
                        "type": "string"
                    },
                    "ipi": {
                        "type": "array",
                        "items": {}
                    },
                    "isni": {
                        "type": "array",
                        "items": {}
                    },
                    "rating": {
                        "type": "array",
                        "items": {}
                    },
                    "votes_count": {
                        "type": "integer"
                    },
                    "user_rating": {
                        "type": "integer"
                    },
                    "track_count": {
                        "type": "integer"
                    },
                    "medium": {
                        "type": "array",
                        "items": {}
                    },
                    "track": {
                        "type": "array",
                        "items": {}
                    },
                    "position": {
                        "type": "integer"
                    },
                    "number": {
                        "type": "string"
                    },
                    "length": {
                        "type": "integer"
                    },
                    "recording": {
                        "type": "array",
                        "items": {}
                    },
                    "video": {
                        "type": "boolean"
                    },
                    "puid": {
                        "type": "array",
                        "items": {}
                    },
                    "isrc": {
                        "type": "array",
                        "items": {}
                    },
                    "format": {
                        "type": "array",
                        "items": {}
                    },
                    "disc": {
                        "type": "array",
                        "items": {}
                    },
                    "sectors": {
                        "type": "integer"
                    },
                    "pregap": {
                        "type": "integer"
                    },
                    "collection": {
                        "type": "array",
                        "items": {}
                    },
                    "entity_type": {
                        "type": "string"
                    },
                    "editor": {
                        "type": "string"
                    },
                    "artist": {
                        "type": "array",
                        "items": {}
                    },
                    "gender": {
                        "type": "string"
                    },
                    "begin_area": {
                        "type": "array",
                        "items": {}
                    },
                    "end_area": {
                        "type": "array",
                        "items": {}
                    },
                    "work": {
                        "type": "array",
                        "items": {}
                    },
                    "fluency": {
                        "type": "string"
                    },
                    "iswc": {
                        "type": "array",
                        "items": {}
                    },
                    "event": {
                        "type": "array",
                        "items": {}
                    },
                    "cancelled": {
                        "type": "boolean"
                    },
                    "time": {
                        "type": "string"
                    },
                    "setlist": {
                        "type": "array",
                        "items": {}
                    },
                    "instrument": {
                        "type": "array",
                        "items": {}
                    },
                    "description": {
                        "type": "string"
                    },
                    "place": {
                        "type": "array",
                        "items": {}
                    },
                    "address": {
                        "type": "string"
                    },
                    "coordinates": {
                        "type": "array",
                        "items": {}
                    },
                    "latitude": {
                        "type": "number"
                    },
                    "longitude": {
                        "type": "number"
                    },
                    "series": {
                        "type": "array",
                        "items": {}
                    },
                    "media": {
                        "type": "array",
                        "items": {}
                    },
                    "score": {
                        "type": "integer"
                    }
                },
                "title": "App.Http.Integrations.MusicBrainz.Models.Release"
            },
            "ArtistResource": {
                "type": "object",
                "properties": {
                    "publicId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "sortName": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "country": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "type": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "lifeSpanBegin": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "lifeSpanEnd": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "disambiguation": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "mbid": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "discogsId": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "spotifyId": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "portrait": {
                        "description": "Portrait relation",
                        "$ref": "#/components/schemas/ImageResource"
                    }
                },
                "required": [
                    "publicId",
                    "name",
                    "sortName",
                    "country",
                    "type",
                    "lifeSpanBegin",
                    "lifeSpanEnd",
                    "disambiguation",
                    "mbid",
                    "discogsId",
                    "spotifyId",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "ArtistResource"
            },
            "AuthenticateUsingPasskeyRequest": {
                "type": "object",
                "properties": {
                    "start_authentication_response": {
                        "type": "string"
                    }
                },
                "required": [
                    "start_authentication_response"
                ],
                "title": "AuthenticateUsingPasskeyRequest"
            },
            "CreateLibraryRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "path": {
                        "type": "string",
                        "maxLength": 1000
                    },
                    "type": {
                        "$ref": "#/components/schemas/LibraryType"
                    },
                    "order": {
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "path",
                    "type",
                    "order"
                ],
                "title": "CreateLibraryRequest"
            },
            "CreatePlaylistRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isPublic": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "name"
                ],
                "title": "CreatePlaylistRequest"
            },
            "CreateSmartPlaylistRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isPublic": {
                        "type": "boolean"
                    },
                    "rules": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "operator": {
                                    "type": "string",
                                    "enum": [
                                        "and",
                                        "or"
                                    ]
                                },
                                "rules": {
                                    "type": "array",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "field": {
                                                "type": "string"
                                            },
                                            "operator": {
                                                "type": "string"
                                            },
                                            "value": {
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "field",
                                            "operator",
                                            "value"
                                        ]
                                    }
                                }
                            },
                            "required": [
                                "rules"
                            ]
                        }
                    }
                },
                "required": [
                    "name",
                    "rules"
                ],
                "title": "CreateSmartPlaylistRequest"
            },
            "CreateUserRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 160
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 254
                    },
                    "password": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 100
                    }
                },
                "required": [
                    "name",
                    "email",
                    "password"
                ],
                "title": "CreateUserRequest"
            },
            "ForgotPasswordRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "email"
                ],
                "title": "ForgotPasswordRequest"
            },
            "GenreResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "songs": {
                        "type": "array",
                        "description": "Songs relation",
                        "items": {
                            "$ref": "#/components/schemas/SongResource"
                        }
                    }
                },
                "required": [
                    "id",
                    "name",
                    "slug",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "GenreResource"
            },
            "ImageResource": {
                "type": "object",
                "properties": {
                    "publicId": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "extension": {
                        "type": "string"
                    },
                    "size": {
                        "type": "integer"
                    },
                    "mimeType": {
                        "type": "string"
                    },
                    "width": {
                        "type": "integer"
                    },
                    "height": {
                        "type": "integer"
                    },
                    "blurhash": {
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicId",
                    "path",
                    "extension",
                    "size",
                    "mimeType",
                    "width",
                    "height",
                    "blurhash",
                    "url"
                ],
                "title": "ImageResource"
            },
            "LibraryResource": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "order": {
                        "type": "integer"
                    },
                    "lastScan": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    }
                },
                "required": [
                    "name",
                    "slug",
                    "path",
                    "type",
                    "order",
                    "lastScan",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "LibraryResource"
            },
            "LibraryStatsResource": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Library display name"
                    },
                    "slug": {
                        "type": "string",
                        "description": "URL-friendly library identifier"
                    },
                    "path": {
                        "type": "string",
                        "description": "File system path to library"
                    },
                    "type": {
                        "type": "string",
                        "description": "Library type (music, video, etc.)"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Display order for library sorting"
                    },
                    "lastScan": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Last scan timestamp in ISO format"
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Creation timestamp in ISO format"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "description": "Last update timestamp in ISO format"
                    },
                    "stats": {
                        "type": "object",
                        "properties": {
                            "formatted": {
                                "type": "object",
                                "properties": {
                                    "songs": {
                                        "type": "string",
                                        "description": "Human-readable song count (e.g., \"1,234\")"
                                    },
                                    "albums": {
                                        "type": "string",
                                        "description": "Human-readable album count (e.g., \"123\")"
                                    },
                                    "artists": {
                                        "type": "string",
                                        "description": "Human-readable artist count (e.g., \"45\")"
                                    },
                                    "genres": {
                                        "type": "string",
                                        "description": "Human-readable genre count (e.g., \"12\")"
                                    },
                                    "duration": {
                                        "type": "string",
                                        "description": "Human-readable duration (e.g., \"2:30:45\" or \"45:20\")"
                                    },
                                    "size": {
                                        "type": "string",
                                        "description": "Human-readable size (e.g., \"1.23 GB\")"
                                    }
                                },
                                "required": [
                                    "songs",
                                    "albums",
                                    "artists",
                                    "genres",
                                    "duration",
                                    "size"
                                ]
                            },
                            "raw": {
                                "type": "object",
                                "description": "Raw numerical values for calculations and sorting.\nOnly included when raw stats are available.",
                                "properties": {
                                    "songs": {
                                        "type": "integer",
                                        "description": "Total number of songs"
                                    },
                                    "albums": {
                                        "type": "integer",
                                        "description": "Total number of albums"
                                    },
                                    "artists": {
                                        "type": "integer",
                                        "description": "Total number of artists"
                                    },
                                    "genres": {
                                        "type": "integer",
                                        "description": "Total number of genres"
                                    },
                                    "duration": {
                                        "type": "integer",
                                        "description": "Total duration in seconds"
                                    },
                                    "size": {
                                        "type": "integer",
                                        "description": "Total size in bytes"
                                    }
                                },
                                "required": [
                                    "songs",
                                    "albums",
                                    "artists",
                                    "genres",
                                    "duration",
                                    "size"
                                ]
                            }
                        },
                        "required": [
                            "formatted"
                        ]
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Statistics computation metadata.\nOnly included when metadata is available.",
                        "properties": {
                            "statsLoadedAt": {
                                "type": [
                                    "string",
                                    "null"
                                ],
                                "description": "ISO timestamp when stats were computed"
                            },
                            "computationTimeMs": {
                                "type": [
                                    "number",
                                    "null"
                                ],
                                "description": "Time taken to compute stats in milliseconds"
                            }
                        },
                        "required": [
                            "statsLoadedAt",
                            "computationTimeMs"
                        ]
                    }
                },
                "required": [
                    "name",
                    "slug",
                    "path",
                    "type",
                    "order",
                    "lastScan",
                    "createdAt",
                    "updatedAt",
                    "stats"
                ],
                "title": "LibraryStatsResource"
            },
            "LibraryType": {
                "type": "string",
                "enum": [
                    "music",
                    "podcast",
                    "audiobook",
                    "movie",
                    "tv_show"
                ],
                "title": "LibraryType"
            },
            "LogFile": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "fileName": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "title": "LogFile"
            },
            "LoginRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "password": {
                        "type": "string"
                    },
                    "remember": {
                        "type": "boolean"
                    }
                },
                "required": [
                    "email",
                    "password"
                ],
                "title": "LoginRequest"
            },
            "LogoutRequest": {
                "type": "object",
                "properties": {
                    "refreshToken": {
                        "type": "string"
                    }
                },
                "title": "LogoutRequest"
            },
            "MovieResource": {
                "type": "object",
                "properties": {
                    "title": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "year": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "summary": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "videoCount": {
                        "type": "string"
                    }
                },
                "required": [
                    "title",
                    "slug",
                    "year",
                    "summary",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "MovieResource"
            },
            "NewAccessTokenResource": {
                "type": "object",
                "properties": {
                    "token": {
                        "type": "string"
                    },
                    "abilities": {
                        "type": "string"
                    },
                    "expiresAt": {
                        "type": "string"
                    }
                },
                "required": [
                    "token",
                    "abilities",
                    "expiresAt"
                ],
                "title": "NewAccessTokenResource"
            },
            "PersonalAccessTokenViewResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "abilities": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "deviceName": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "deviceOperatingSystem": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "expiresAt": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "lastUsedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "userAgent": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "ipAddress": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "ipHistory": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {
                            "type": "string"
                        }
                    },
                    "countryCode": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "city": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "ipChangeCount": {
                        "type": "integer"
                    }
                },
                "required": [
                    "id",
                    "name",
                    "abilities",
                    "createdAt",
                    "deviceName",
                    "deviceOperatingSystem",
                    "expiresAt",
                    "lastUsedAt",
                    "updatedAt",
                    "userAgent",
                    "ipAddress",
                    "ipHistory",
                    "countryCode",
                    "city",
                    "ipChangeCount"
                ],
                "title": "PersonalAccessTokenViewResource"
            },
            "PlaylistResource": {
                "type": "object",
                "properties": {
                    "publicId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isPublic": {
                        "type": "string"
                    },
                    "isCollaborative": {
                        "type": "string"
                    },
                    "isSmart": {
                        "type": "string"
                    },
                    "smartRules": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {}
                    },
                    "cover": {
                        "$ref": "#/components/schemas/ImageResource"
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "songsCount": {
                        "type": "integer"
                    },
                    "statistics": {
                        "type": "object",
                        "properties": {
                            "views": {
                                "type": "integer"
                            },
                            "plays": {
                                "type": "integer"
                            },
                            "shares": {
                                "type": "integer"
                            },
                            "favorites": {
                                "type": "integer"
                            }
                        },
                        "required": [
                            "views",
                            "plays",
                            "shares",
                            "favorites"
                        ]
                    },
                    "songs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/SongResource"
                        }
                    },
                    "owner": {
                        "type": "object",
                        "properties": {
                            "email": {
                                "type": "string"
                            },
                            "name": {
                                "type": "string"
                            }
                        },
                        "required": [
                            "email",
                            "name"
                        ]
                    },
                    "collaborators": {
                        "type": "string"
                    }
                },
                "required": [
                    "publicId",
                    "name",
                    "description",
                    "isPublic",
                    "isCollaborative",
                    "isSmart",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "PlaylistResource"
            },
            "PlaylistStatistic": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "playlist_id": {
                        "type": "integer"
                    },
                    "views": {
                        "type": "integer"
                    },
                    "plays": {
                        "type": "integer"
                    },
                    "shares": {
                        "type": "integer"
                    },
                    "favorites": {
                        "type": "integer"
                    },
                    "created_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updated_at": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "playlist_id",
                    "views",
                    "plays",
                    "shares",
                    "favorites",
                    "created_at",
                    "updated_at"
                ],
                "title": "PlaylistStatistic"
            },
            "QueueMonitorResource": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "jobId": {
                        "type": "string"
                    },
                    "name": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "queue": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "startedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "finishedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "attempt": {
                        "type": "integer"
                    },
                    "progress": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "exception": {
                        "type": [
                            "array",
                            "null"
                        ],
                        "items": {}
                    },
                    "exceptionClass": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "data": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "status": {
                        "type": "string"
                    },
                    "jobUuid": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "retried": {
                        "type": "boolean"
                    },
                    "queuedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    }
                },
                "required": [
                    "id",
                    "jobId",
                    "name",
                    "queue",
                    "startedAt",
                    "finishedAt",
                    "attempt",
                    "progress",
                    "exception",
                    "exceptionClass",
                    "data",
                    "status",
                    "jobUuid",
                    "retried",
                    "queuedAt"
                ],
                "title": "QueueMonitorResource"
            },
            "RegisterRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 255
                    },
                    "password": {
                        "type": "string"
                    },
                    "password_confirmation": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "email",
                    "password",
                    "password_confirmation"
                ],
                "title": "RegisterRequest"
            },
            "Release": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "title": {
                        "type": "string"
                    },
                    "uri": {
                        "type": "string"
                    },
                    "resource_url": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string"
                    },
                    "thumbnail": {
                        "type": "string"
                    },
                    "cover_image": {
                        "type": "string"
                    },
                    "images": {
                        "type": "array",
                        "items": {}
                    },
                    "artists": {
                        "type": "array",
                        "items": {}
                    },
                    "formats": {
                        "type": "array",
                        "items": {}
                    },
                    "labels": {
                        "type": "array",
                        "items": {}
                    },
                    "tracklist": {
                        "type": "array",
                        "items": {}
                    },
                    "country": {
                        "type": "string"
                    },
                    "released": {
                        "type": "string"
                    },
                    "year": {
                        "type": "integer"
                    },
                    "notes": {
                        "type": "string"
                    },
                    "data_quality": {
                        "type": "string"
                    },
                    "genres": {
                        "type": "array",
                        "items": {}
                    },
                    "styles": {
                        "type": "array",
                        "items": {}
                    },
                    "master_id": {
                        "type": "string"
                    },
                    "master_url": {
                        "type": "string"
                    },
                    "catno": {
                        "type": "string"
                    }
                },
                "title": "Release"
            },
            "ResetPasswordRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email"
                    },
                    "token": {
                        "type": "string"
                    },
                    "password": {
                        "type": "string"
                    },
                    "password_confirmation": {
                        "type": "string"
                    }
                },
                "required": [
                    "email",
                    "token",
                    "password",
                    "password_confirmation"
                ],
                "title": "ResetPasswordRequest"
            },
            "RetryJobRequest": {
                "type": "object",
                "properties": {
                    "id": {
                        "type": "integer"
                    }
                },
                "title": "RetryJobRequest"
            },
            "SongResource": {
                "type": "object",
                "properties": {
                    "publicId": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "year": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "comment": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "disc": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "length": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "durationHuman": {
                        "type": "string"
                    },
                    "lyrics": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "lyricsExist": {
                        "type": "boolean"
                    },
                    "modifiedTime": {
                        "type": "string"
                    },
                    "path": {
                        "type": "string"
                    },
                    "track": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "size": {
                        "type": "integer"
                    },
                    "sizeHuman": {
                        "type": "string"
                    },
                    "mimeType": {
                        "type": "string"
                    },
                    "hash": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "mbid": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "discogsId": {
                        "type": [
                            "integer",
                            "null"
                        ]
                    },
                    "streamUrl": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "album": {
                        "$ref": "#/components/schemas/AlbumWithoutSongsResource"
                    },
                    "artists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ArtistResource"
                        }
                    }
                },
                "required": [
                    "publicId",
                    "title",
                    "year",
                    "comment",
                    "disc",
                    "length",
                    "durationHuman",
                    "lyrics",
                    "lyricsExist",
                    "modifiedTime",
                    "path",
                    "track",
                    "size",
                    "sizeHuman",
                    "mimeType",
                    "hash",
                    "mbid",
                    "discogsId",
                    "streamUrl",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "SongResource"
            },
            "StorePasskeyRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "passkey": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "passkey"
                ],
                "title": "StorePasskeyRequest"
            },
            "UpdateGenreRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "minLength": 1,
                        "maxLength": 255
                    }
                },
                "required": [
                    "name"
                ],
                "title": "UpdateGenreRequest"
            },
            "UpdateLibraryRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 100
                    },
                    "path": {
                        "type": "string",
                        "maxLength": 1000
                    },
                    "type": {
                        "$ref": "#/components/schemas/LibraryType"
                    },
                    "order": {
                        "type": "integer"
                    }
                },
                "title": "UpdateLibraryRequest"
            },
            "UpdatePlaylistRequest": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "maxLength": 255
                    },
                    "description": {
                        "type": [
                            "string",
                            "null"
                        ]
                    },
                    "isPublic": {
                        "type": "boolean"
                    }
                },
                "title": "UpdatePlaylistRequest"
            },
            "UpdateSmartPlaylistRulesRequest": {
                "type": "object",
                "properties": {
                    "rules": {
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "field": {
                                        "type": "string"
                                    },
                                    "operator": {
                                        "type": "string"
                                    },
                                    "value": {
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "field",
                                    "operator",
                                    "value"
                                ]
                            }
                        }
                    }
                },
                "required": [
                    "rules"
                ],
                "title": "UpdateSmartPlaylistRulesRequest"
            },
            "UpdateUserRequest": {
                "type": "object",
                "properties": {
                    "email": {
                        "type": "string",
                        "format": "email",
                        "maxLength": 254
                    },
                    "password": {
                        "type": "string",
                        "maxLength": 100
                    }
                },
                "title": "UpdateUserRequest"
            },
            "UserResource": {
                "type": "object",
                "properties": {
                    "publicId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "email": {
                        "type": "string"
                    },
                    "isAdmin": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "boolean"
                            }
                        ]
                    },
                    "createdAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    },
                    "updatedAt": {
                        "type": [
                            "string",
                            "null"
                        ],
                        "format": "date-time"
                    }
                },
                "required": [
                    "publicId",
                    "name",
                    "email",
                    "isAdmin",
                    "createdAt",
                    "updatedAt"
                ],
                "title": "UserResource"
            }
        },
        "responses": {
            "ValidationException": {
                "description": "Validation error",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Errors overview."
                                },
                                "errors": {
                                    "type": "object",
                                    "description": "A detailed description of each field that failed validation.",
                                    "additionalProperties": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    }
                                }
                            },
                            "required": [
                                "message",
                                "errors"
                            ]
                        }
                    }
                }
            },
            "AuthorizationException": {
                "description": "Authorization error",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            },
            "AuthenticationException": {
                "description": "Unauthenticated",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            },
            "ModelNotFoundException": {
                "description": "Not found",
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "message": {
                                    "type": "string",
                                    "description": "Error overview."
                                }
                            },
                            "required": [
                                "message"
                            ]
                        }
                    }
                }
            }
        }
    }
}